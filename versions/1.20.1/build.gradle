plugins {
    id "me.modmuss50.mod-publish-plugin" version "0.8.3"
}

apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'

int mcVersion = 1

ext {
    getVersionSuffix = {
        String buildNumber
        String buildType = 'build'
        if (System.getenv("CI_BUILD") == 'false') buildNumber = null
        else {
            if (System.getenv("PR_BUILD") != 'false') buildType = 'pr'
            buildNumber = System.getenv("GITHUB_RUN_NUMBER")
        }
        String versionSuffix = (buildNumber != null ? "+${buildType}.${buildNumber}" : "")
        return versionSuffix
    }
}

preprocess {
    mcVersion = vars.get()["MC"] as int
    tabIndentation = true
}

configurations {
    modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}

repositories {
    mavenLocal()
    maven {
        name 'mavenCentral'
        url 'https://repo1.maven.org/maven2/'
    }
    maven {
        name 'CjsahMaven'
        url 'https://server.cjsah.net:1002/maven/'
    }
    maven {
        name 'CurseMaven'
        url "https://www.cursemaven.com"
    }
}

loom {
    accessWidenerPath = file("gca.accesswidener")
}

remapJar {
    remapperIsolation = true
}

JavaVersion SOURCE_JAVA_VERSION
JavaVersion TARGET_JAVA_VERSION
if (mcVersion >= 12005) {
    SOURCE_JAVA_VERSION = JavaVersion.VERSION_21
    TARGET_JAVA_VERSION = JavaVersion.VERSION_21
} else if (mcVersion >= 11800) {
    SOURCE_JAVA_VERSION = JavaVersion.VERSION_17
    TARGET_JAVA_VERSION = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
    SOURCE_JAVA_VERSION = JavaVersion.VERSION_16
    TARGET_JAVA_VERSION = JavaVersion.VERSION_16
} else {
    SOURCE_JAVA_VERSION = JavaVersion.VERSION_1_8
    TARGET_JAVA_VERSION = JavaVersion.VERSION_17
}
JavaVersion MIXIN_COMPATIBILITY_LEVEL = TARGET_JAVA_VERSION

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // fabric-carpet
    modImplementation("curse.maven:carpet-349239:${project.carpet_core_version}")
    // jep
    include(implementation 'jep:jep:2.24')
    // mixin-extras
    if (mcVersion < 12100) {
        include(modImplementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixinextras_version}")))
    }
}

String versionSuffix = project.getVersionSuffix()

String fullModVersion = project.mod_version + versionSuffix

version = 'v' + fullModVersion
group = project.maven_group
archivesBaseName = project.archives_base_name + '-mc' + project.minecraft_version

String fabric_id = "fabric-api"
if (mcVersion < 11800) {
    fabric_id = "fabric"
}

processResources {
    from "gca.accesswidener"

    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        def valueMap = [
                "version"          : fullModVersion,
                "id"               : project.mod_id,
                "name"             : project.archives_base_name,
                "minecraft_support": project.minecraft_support_version,
                "fabric_loader"    : project.loader_version,
                "fabric_api_id"    : fabric_id
        ]
        expand valueMap
    }

    filesMatching("quickbackupmulti.mixins.json") {
        filter {
            text -> text.replace("/*JAVA_VERSION*/", "JAVA_${MIXIN_COMPATIBILITY_LEVEL.ordinal() + 1}")
        }
    }
}

java {
    withSourcesJar()
    sourceCompatibility = SOURCE_JAVA_VERSION
    targetCompatibility = TARGET_JAVA_VERSION
}

publishMods {
    file = remapJar.archiveFile
    changelog = "Changelog"
    type = BETA
    modLoaders.add("fabric")
    modLoaders.add("quilt")

    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        projectId = "662867"
        minecraftVersions.add(project.game_versions)
    }

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "UHjbX5mk"
        minecraftVersions.add(project.game_versions)
    }
}

jar {
    from "LICENSE"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}